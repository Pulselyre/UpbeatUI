<!-- This file is part of the UpbeatUI project, which is released under MIT License.
     See LICENSE.md or visit:
     https://github.com/michaelpduda/upbeatui/blob/master/LICENSE.md
     -->
<!-- The "HeightPercent" and "WidthPercent" properties set how much available space the
     UpbeatControl should take. It accepts percentages and decimal values (so 1.0 = 100%).
     It can also accept min/max ranges. In this case, the View will be no smaller than 60%
     of available space, and no larger than 80%. Between those two values, it will take as
     much space as the content requires. -->
<uv:UpbeatControl x:Class="BasicUpbeatUISample.View.RandomDataControl"
                  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                  xmlns:uvc="clr-namespace:UpbeatUI.View.Converters;assembly=UpbeatUI"
                  xmlns:uv="clr-namespace:UpbeatUI.View;assembly=UpbeatUI"
                  HeightPercent="60% 80%"
                  WidthPercent="60% 80%"
                  mc:Ignorable="d"
                  d:DesignHeight="265"
                  d:DesignWidth="265">
    <!-- The PercentPositionWithinUpbeatStackConverter is used in CommandParameter
         bindings for Commands that need to know the position of the button that executed
         them. This can be used to open a popup above the button that the user
         clicked/touched. -->
    <uv:UpbeatControl.Resources>
        <uvc:PercentPositionWithinUpbeatStackConverter x:Key="PositionConverter" />
    </uv:UpbeatControl.Resources>
    <Border BorderBrush="Black"
            BorderThickness="5"
            Background="White">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="*"
                               MaxHeight="{Binding ActualHeight, ElementName=_scaledPanel}"/>
                <RowDefinition Height="*"
                               MinHeight="60"/>
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
            </Grid.RowDefinitions>
            <UniformGrid Grid.Row="0"
                         Rows="1">
                <!-- When a bound Command needs an Action<Point> as a parameter, to
                     determine the position of the Button that executed it, create a
                     binding with a RelativeSource of Self, and use the
                     PercentPositionWithinUpbeatStackConverter created above as
                     the Converter. The converter create the Action<Point>. -->
                <Button Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                <Button Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                <Button Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                <Button Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
            </UniformGrid>
            <Viewbox Grid.Row="1"
                     Stretch="Uniform"
                     StretchDirection="DownOnly">
                <StackPanel x:Name="_scaledPanel"
                            DockPanel.Dock="Top"
                            Orientation="Vertical">
                    <TextBlock TextWrapping="Wrap"
                               TextAlignment="Center"
                               HorizontalAlignment="Center"
                               MaxWidth="250"
                               Margin="5">
                        This View is configured to take between 60% and 80% of available width and height, depending on what is needed to display its children and the total space available.
                    </TextBlock>
                    <TextBlock Text="{Binding SecondsElapsed}"
                               TextAlignment="Center"
                               Margin="5" />
                </StackPanel>
            </Viewbox>
            <DataGrid Grid.Row="2"
                      ItemsSource="{Binding Data}"
                      VerticalScrollBarVisibility="Visible"
                      Margin="5" />
            <Button Grid.Row="3"
                    Command="{Binding RefreshDataCommand}"
                    Margin="5">Refresh Random Data</Button>
            <UniformGrid Grid.Row="4"
                         Rows="1">
                <Button Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                <Button Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                <Button Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                <Button Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
            </UniformGrid>
        </Grid>
    </Border>
</uv:UpbeatControl>
