<!-- This file is part of the UpbeatUI project, which is released under MIT License.
     See LICENSE.md or visit:
     https://github.com/pulselyre/upbeatui/blob/main/LICENSE.md
     -->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:uv="clr-namespace:UpbeatUI.View;assembly=UpbeatUI"
    xmlns:uvc="clr-namespace:UpbeatUI.View.Converters;assembly=UpbeatUI"
    xmlns:svm="clr-namespace:HostedUpbeatUISample.ViewModel">
    <!-- Note that "DataType" for this DataTemplate refers to a specific ViewModel class. When an instance of that
         ViewModel class is added to the stack, this DataTemplate will be used to display content. The VieWModel
         instance will be the "DataContext". -->
    <DataTemplate DataType="{x:Type svm:RandomDataViewModel}">
        <!-- The PercentPositionWithinUpbeatStackConverter is used in CommandParameter bindings for Commands that need
             to know the position of the button that executed them. This can be used to open a popup above the button
             that the user clicked/touched. -->
        <DataTemplate.Resources>
            <uvc:PercentPositionWithinUpbeatStackConverter x:Key="PositionConverter" />
        </DataTemplate.Resources>
        <!-- The "HeightPercent" and "WidthPercent" properties, which must be set on the root element within the
             DataTemplate, control how much available space the content should take. It accepts percentages and decimal
             values (so 1.0 = 100%). It can also accept min/max ranges. This view will take exactly 60% of available
             horizontal space, always, and whatever its content needs vertically up to 95%. -->
        <Border
            uv:PercentPlace.HeightPercent="60% 80%"
            uv:PercentPlace.WidthPercent="60% 80%"
            BorderBrush="Black"
            BorderThickness="5"
            Background="White">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition
                        Height="*"
                        MaxHeight="{Binding ActualHeight, ElementName=_scaledPanel}" />
                    <RowDefinition
                        Height="*"
                        MinHeight="60" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                </Grid.RowDefinitions>
                <UniformGrid
                    Grid.Row="0"
                    Rows="1">
                    <!-- When a bound Command needs an Action<Point> as a parameter, to
                     determine the position of the Button that executed it, create a
                     binding with a RelativeSource of Self, and use the
                     PercentPositionWithinUpbeatStackConverter created above as
                     the Converter. The converter create the Action<Point>. -->
                    <Button
                        Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                    <Button
                        Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                    <Button
                        Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                    <Button
                        Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                </UniformGrid>
                <Viewbox
                    Grid.Row="1"
                    Stretch="Uniform"
                    StretchDirection="DownOnly">
                    <StackPanel
                        x:Name="_scaledPanel"
                        DockPanel.Dock="Top"
                        Orientation="Vertical">
                        <TextBlock
                            TextWrapping="Wrap"
                            TextAlignment="Center"
                            HorizontalAlignment="Center"
                            MaxWidth="250"
                            Margin="5"> This View is configured to take between 60% and 80% of available width and
                            height, depending on what is needed to display its children and the total space available. </TextBlock>
                        <TextBlock
                            Text="{Binding SecondsElapsed}"
                            TextAlignment="Center"
                            Margin="5" />
                    </StackPanel>
                </Viewbox>
                <Canvas
                    Grid.Row="2"
                    Margin="5">
                    <DataGrid
                        Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Canvas}},Path=ActualWidth}"
                        Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Canvas}},Path=ActualHeight}"
                        ItemsSource="{Binding Data, IsAsync=True}"
                        VerticalScrollBarVisibility="Visible"
                        EnableColumnVirtualization="True"
                        EnableRowVirtualization="True" />
                </Canvas>
                <Button
                    Grid.Row="3"
                    Command="{Binding RefreshDataCommand}"
                    Margin="5">Refresh Random Data</Button>
                <UniformGrid
                    Grid.Row="4"
                    Rows="1">
                    <Button
                        Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                    <Button
                        Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                    <Button
                        Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                    <Button
                        Command="{Binding OpenPositionedPopupCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource PositionConverter}}"
                        Margin="5">Popup</Button>
                </UniformGrid>
            </Grid>
        </Border>
    </DataTemplate>
</ResourceDictionary>
